[2023-05-04 15:15:30,345][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:15:30,468][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:15:30,483][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 15:15:30,487][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 15:15:30,488][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 15:15:30,497][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']]} 
[2023-05-04 15:15:30,530][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:16:16,251][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:16:16,263][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:16:16,269][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 15:16:16,269][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 15:16:16,269][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 15:16:16,272][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']]} 
[2023-05-04 15:16:16,294][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:59:35,716][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:59:35,727][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 15:59:35,732][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 15:59:35,733][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 15:59:35,733][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 15:59:35,737][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': '-["2023-05-25 15:14:11",710, 1, True, 0, "成功" ]', 'test_set_aside_ticket': None} 
[2023-05-04 15:59:35,761][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:04,008][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:04,020][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:04,025][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 16:10:04,027][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 16:10:04,027][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 16:10:04,031][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': '-["2023-05-25 15:14:11",710, 1, True, 0, "成功" ]', 'test_set_aside_ticket': None} 
[2023-05-04 16:10:04,052][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:04,057][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 16:10:04,057][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 16:10:04,057][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 16:10:04,057][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 16:10:04,057][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 16:10:04,057][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 16:10:04,057][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 16:10:04,057][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 16:10:04,089][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 16:10:04,091][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 16:10:04,091][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 16:10:04,091][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 16:10:04,091][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 16:10:04,091][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 16:10:04,091][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 16:10:04,091][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 16:10:04,092][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 16:10:04,092][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 16:10:38,652][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:38,664][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:38,669][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 16:10:38,669][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 16:10:38,669][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 16:10:38,677][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': '-["2023-05-25 15:14:11",710, 1, True, 0, "成功" ]', 'test_set_aside_ticket': None} 
[2023-05-04 16:10:38,696][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:10:38,704][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 16:10:38,704][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 16:10:38,704][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 16:10:38,704][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 16:10:38,704][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 16:10:38,704][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 16:10:38,704][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 16:10:38,704][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 16:10:38,722][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 16:10:38,724][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 16:10:38,724][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 16:10:38,724][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 16:10:38,724][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 16:10:38,724][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 16:10:38,724][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 16:10:38,724][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 16:10:38,724][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 16:10:38,724][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 16:10:38,751][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12889,"ticketId":"74wf54m7xcdrwz01","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12890,"ticketId":"xb1ehsmdp63gaxzz","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12891,"ticketId":"ahu3hxf4cg67cwdb","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12892,"ticketId":"2d06igl29pxsyfuo","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":101,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 16:10:38,751][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 16:10:38,752][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 16:11:25,351][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:11:25,363][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:11:25,387][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 16:11:25,388][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 16:11:25,388][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 16:11:25,391][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': '-["2023-05-25 15:14:11",710, 1, True, 0, "成功" ]', 'test_set_aside_ticket': None} 
[2023-05-04 16:11:25,412][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:11:25,418][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 16:11:25,418][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 16:11:25,418][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 16:11:25,418][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 16:11:25,418][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 16:11:25,418][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 16:11:25,418][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 16:11:25,419][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 16:11:25,437][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 16:11:25,439][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 16:11:25,439][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 16:11:25,439][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 16:11:25,439][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 16:11:25,439][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 16:11:25,439][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 16:11:25,439][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 16:11:25,440][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 16:11:25,440][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 16:11:25,469][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12889,"ticketId":"74wf54m7xcdrwz01","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12890,"ticketId":"xb1ehsmdp63gaxzz","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12891,"ticketId":"ahu3hxf4cg67cwdb","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12892,"ticketId":"2d06igl29pxsyfuo","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":101,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 16:11:25,469][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 16:11:25,470][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 16:11:25,470][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 16:55:28,315][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:55:28,327][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 16:55:28,350][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 16:55:28,351][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 16:55:28,351][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 16:55:28,354][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': '-["2023-05-25 15:14:11",710, 1, True, 0, "成功" ]', 'test_set_aside_ticket': '-[12984, True, 0, "成功" ]'} 
[2023-05-04 16:55:28,377][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:00:58,845][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:00:58,857][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:00:58,885][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:00:58,886][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:00:58,886][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:00:58,890][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': '-[12984, True, 0, "成功" ]'} 
[2023-05-04 17:00:58,908][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:00:58,913][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:00:58,913][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:00:58,913][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:00:58,913][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:00:58,913][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:00:58,914][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:00:58,914][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:00:58,914][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:00:58,946][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:00:58,947][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:00:58,948][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:00:58,948][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:00:58,948][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:00:58,948][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:00:58,948][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:00:58,948][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:00:58,948][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:00:58,949][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:00:59,008][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12889,"ticketId":"74wf54m7xcdrwz01","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12890,"ticketId":"xb1ehsmdp63gaxzz","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12891,"ticketId":"ahu3hxf4cg67cwdb","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12892,"ticketId":"2d06igl29pxsyfuo","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":101,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:00:59,009][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:00:59,010][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:00:59,010][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:00:59,025][test_04_ticket.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:00:59,027][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:00:59,027][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:00:59,027][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:00:59,027][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:00:59,027][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:00:59,027][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-26 15:14:11",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:00:59,027][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:00:59,027][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:00:59,048][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:00:59,049][test_04_ticket.py 15][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:00:59,049][test_04_ticket.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:00:59,049][test_04_ticket.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:05:43,518][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:05:43,530][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:05:43,538][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:05:43,539][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:05:43,539][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:05:43,542][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12985, True, 0, '成功']]} 
[2023-05-04 17:05:43,568][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:05:43,574][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:05:43,574][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:05:43,574][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:05:43,574][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:05:43,574][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:05:43,574][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:05:43,574][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:05:43,574][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:05:43,598][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:05:43,599][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:05:43,600][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:05:43,600][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:05:43,600][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:05:43,600][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:05:43,600][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:05:43,600][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:05:43,601][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:05:43,601][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:05:43,627][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12889,"ticketId":"74wf54m7xcdrwz01","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12890,"ticketId":"xb1ehsmdp63gaxzz","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12891,"ticketId":"ahu3hxf4cg67cwdb","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":102,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:05:43,627][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:05:43,627][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:05:43,628][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:05:43,638][test_04_ticket.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:05:43,638][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:05:43,638][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:05:43,638][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:05:43,638][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:05:43,638][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:05:43,638][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-26 15:14:11",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:05:43,638][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:05:43,638][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:05:43,654][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:05:43,654][test_04_ticket.py 15][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:05:43,654][test_04_ticket.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:05:43,654][test_04_ticket.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:06:11,982][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:06:11,994][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:06:11,999][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:06:11,999][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:06:11,999][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:06:12,003][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12985, True, 0, '成功']]} 
[2023-05-04 17:06:12,026][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:06:12,034][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:06:12,034][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:06:12,034][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:06:12,034][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:06:12,034][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:06:12,034][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:06:12,034][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:06:12,034][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:06:12,057][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:06:12,059][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:06:12,059][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:06:12,059][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:06:12,059][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:06:12,059][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:06:12,059][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:06:12,059][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:06:12,059][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:06:12,059][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:06:12,083][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12889,"ticketId":"74wf54m7xcdrwz01","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12890,"ticketId":"xb1ehsmdp63gaxzz","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":103,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:06:12,083][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:06:12,083][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:06:12,083][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:06:12,094][test_04_ticket.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:06:12,094][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:06:12,094][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:06:12,094][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:06:12,094][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:06:12,094][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:06:12,094][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-26 15:14:11",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:06:12,094][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:06:12,094][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:06:12,113][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:06:12,113][test_04_ticket.py 15][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:06:12,113][test_04_ticket.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:06:12,113][test_04_ticket.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:06:12,119][test_04_ticket.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:06:12,119][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/{}
[2023-05-04 17:06:12,119][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:06:12,120][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:06:12,120][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:06:12,120][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> "12985"
[2023-05-04 17:06:12,120][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:06:12,120][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:06:12,120][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:07:55,142][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:07:55,155][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:07:55,161][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:07:55,161][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:07:55,161][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:07:55,166][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12985, True, 0, '成功']]} 
[2023-05-04 17:07:55,191][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:07:55,198][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:07:55,198][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:07:55,198][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:07:55,198][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:07:55,198][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:07:55,198][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:07:55,198][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:07:55,199][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:07:55,223][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:07:55,225][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:07:55,225][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:07:55,225][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:07:55,225][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:07:55,225][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:07:55,225][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:07:55,225][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:07:55,225][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:07:55,225][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:07:55,249][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12889,"ticketId":"74wf54m7xcdrwz01","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":104,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:07:55,249][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:07:55,249][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:07:55,249][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:07:55,258][test_04_ticket.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:07:55,258][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:07:55,258][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:07:55,258][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:07:55,258][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:07:55,258][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:07:55,258][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-26 15:14:11",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:07:55,258][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:07:55,258][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:07:55,271][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:07:55,271][test_04_ticket.py 15][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:07:55,271][test_04_ticket.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:07:55,271][test_04_ticket.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:07:55,289][test_04_ticket.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:07:55,289][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/{}
[2023-05-04 17:07:55,289][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:07:55,289][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:07:55,289][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:07:55,290][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> "12985"
[2023-05-04 17:07:55,290][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:07:55,290][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:07:55,290][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:09:54,557][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:09:54,568][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:09:54,582][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:09:54,583][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:09:54,583][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:09:54,589][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12985, True, 0, '成功']]} 
[2023-05-04 17:09:54,610][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:09:54,617][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:09:54,617][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:09:54,617][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:09:54,617][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:09:54,617][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:09:54,617][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:09:54,617][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:09:54,617][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:09:54,633][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:09:54,634][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:09:54,635][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:09:54,635][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:09:54,635][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:09:54,635][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:09:54,635][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:09:54,635][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:09:54,635][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:09:54,635][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:09:54,659][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12888,"ticketId":"wlj8qv0cgomzwxu2","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":105,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:09:54,659][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:09:54,659][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:09:54,659][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:09:54,666][test_04_ticket.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:09:54,666][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:09:54,666][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:09:54,666][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:09:54,666][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:09:54,666][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:09:54,666][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-26 15:14:11",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:09:54,666][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:09:54,666][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:09:54,681][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:09:54,681][test_04_ticket.py 15][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:09:54,681][test_04_ticket.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:09:54,681][test_04_ticket.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:09:54,687][test_04_ticket.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:09:54,687][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12985
[2023-05-04 17:09:54,687][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:09:54,687][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:09:54,687][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:09:54,687][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:09:54,687][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:09:54,687][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:09:54,687][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:09:54,705][test_04_ticket.py 20][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 17:09:54,706][test_04_ticket.py 77][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:09:54,706][test_04_ticket.py 80][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:11:41,101][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:11:41,112][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:11:41,134][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:11:41,136][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:11:41,136][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:11:41,142][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12986, True, 0, '成功']]} 
[2023-05-04 17:11:41,160][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:11:41,166][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:11:41,166][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:11:41,166][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:11:41,166][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:11:41,166][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:11:41,166][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:11:41,166][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:11:41,166][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:11:41,186][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:11:41,190][test_04_ticket.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:11:41,190][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:11:41,190][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:11:41,190][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:11:41,191][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:11:41,191][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:11:41,191][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:11:41,191][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:11:41,191][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:11:41,212][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12887,"ticketId":"fivf3kl3v2kh1l1j","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":106,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:11:41,213][test_04_ticket.py 10][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:11:41,213][test_04_ticket.py 40][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:11:41,213][test_04_ticket.py 43][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:11:41,229][test_04_ticket.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:11:41,229][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:11:41,229][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:11:41,229][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:11:41,229][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:11:41,229][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:11:41,229][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-26 15:14:11",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:11:41,229][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:11:41,229][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:11:41,253][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:11:41,253][test_04_ticket.py 15][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:11:41,253][test_04_ticket.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:11:41,253][test_04_ticket.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:11:41,259][test_04_ticket.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:11:41,259][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12986
[2023-05-04 17:11:41,259][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:11:41,259][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:11:41,259][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:11:41,259][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:11:41,259][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:11:41,259][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:11:41,259][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:11:41,273][test_04_ticket.py 20][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 17:11:41,273][test_04_ticket.py 77][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:11:41,273][test_04_ticket.py 80][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:20:27,643][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:20:27,656][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:20:27,662][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:20:27,664][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:20:27,664][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:20:27,668][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12986, True, 0, '成功']]} 
[2023-05-04 17:20:27,692][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:20:41,885][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:20:41,898][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:20:41,902][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:20:41,902][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:20:41,903][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:20:41,906][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12986, True, 0, '成功']]} 
[2023-05-04 17:20:41,929][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:20:41,935][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:20:41,935][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:20:41,936][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:20:41,936][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:20:41,936][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:20:41,936][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:20:41,936][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:20:41,936][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:20:41,956][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:20:41,958][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:20:41,958][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:20:41,958][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:20:41,958][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:20:41,958][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:20:41,959][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:20:41,959][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:20:41,959][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:20:41,959][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:20:41,993][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12886,"ticketId":"c4e6hodbhq7wc55n","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":107,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:20:41,994][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:20:41,994][test_04_ticket.py 42][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:20:41,994][test_04_ticket.py 45][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:20:42,008][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:20:42,008][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:20:42,008][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:20:42,008][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:20:42,008][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:20:42,009][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:20:42,009][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-04 17:20:41",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:20:42,009][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:20:42,009][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:20:42,028][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:20:42,029][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:20:42,029][test_04_ticket.py 62][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:20:42,029][test_04_ticket.py 65][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:25:49,672][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:25:49,685][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:25:49,691][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:25:49,692][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'"}} 
[2023-05-04 17:25:49,692][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:25:49,695][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12986, True, 0, '成功']]} 
[2023-05-04 17:25:49,718][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:25:49,724][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:25:49,724][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:25:49,724][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:25:49,724][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:25:49,724][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:25:49,724][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:25:49,725][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:25:49,725][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:25:49,739][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:25:49,740][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:25:49,740][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:25:49,740][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:25:49,740][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:25:49,740][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:25:49,740][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:25:49,742][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:25:49,742][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:25:49,742][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:25:49,765][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12884,"ticketId":"daw2f5vtrqgvnj28","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"},{"id":12885,"ticketId":"84sye9w0zw3a5xud","createTime":"2023-04-27 17:52:59","updateTime":"2023-04-27 17:52:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-04-28 17:53:03"}],"total":108,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:25:49,765][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:25:49,765][test_04_ticket.py 42][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:25:49,765][test_04_ticket.py 45][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:25:49,775][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:25:49,775][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:25:49,775][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:25:49,775][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:25:49,775][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:25:49,775][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:25:49,775][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 17:25:49",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:25:49,775][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:25:49,775][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:25:49,788][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:25:49,788][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:25:49,788][test_04_ticket.py 62][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:25:49,788][test_04_ticket.py 65][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:58:12,796][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:58:12,807][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:58:12,832][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:58:12,834][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 17:58:12,834][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:58:12,837][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 17:58:12,862][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:58:12,875][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:58:12,875][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:58:12,875][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:58:12,875][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:58:12,875][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:58:12,875][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:58:12,875][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:58:12,875][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:58:12,904][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:58:12,906][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:58:12,906][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:58:12,906][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:58:12,906][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:58:12,906][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:58:12,906][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:58:12,906][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:58:12,907][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:58:12,907][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:58:12,930][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12992,"ticketId":"1y3e4yaxptgjtrvw","createTime":"2023-05-04 17:25:50","updateTime":"2023-05-04 17:25:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:25:49"},{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"},{"id":12993,"ticketId":"bvscvxi5d3w4urps","createTime":"2023-05-04 09:43:55","updateTime":"2023-05-04 09:43:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2028-05-27 17:39:06"}],"total":110,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":11}}
[2023-05-04 17:58:12,930][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:58:12,930][test_04_ticket.py 42][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:58:12,931][test_04_ticket.py 45][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:58:12,942][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:58:12,942][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:58:12,942][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:58:12,942][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:58:12,942][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:58:12,942][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:58:12,942][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 17:58:12",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:58:12,942][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:58:12,942][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:58:12,967][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:58:12,967][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:58:12,967][test_04_ticket.py 62][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:58:12,967][test_04_ticket.py 65][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:58:12,977][conftest.py 28][INFO]: ******************************
[2023-05-04 17:58:12,977][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 17:58:12,977][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 17:58:12,977][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 17:58:12,978][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:58:12,978][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 17:58:12,978][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:58:12,978][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:58:12,978][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:58:12,978][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:58:12,978][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:58:12,978][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:58:12,979][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:58:12,995][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 17:58:12,996][test_04_ticket.py 81][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:58:12,996][test_04_ticket.py 84][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:59:00,928][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:59:00,940][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:59:00,945][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:59:00,947][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 17:59:00,947][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:59:00,952][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 17:59:00,970][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:59:00,976][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:59:00,976][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:59:00,976][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:59:00,976][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:59:00,976][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:00,976][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:59:00,976][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:59:00,976][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:59:00,992][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:59:00,994][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:59:00,994][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:59:00,994][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:59:00,995][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:59:00,995][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:59:00,995][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:00,995][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:59:00,995][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:59:00,995][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:59:01,019][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12994,"ticketId":"wcawxk6csiuhdpuo","createTime":"2023-05-04 17:58:13","updateTime":"2023-05-04 17:58:13","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:58:12"},{"id":12992,"ticketId":"1y3e4yaxptgjtrvw","createTime":"2023-05-04 17:25:50","updateTime":"2023-05-04 17:25:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:25:49"},{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12984,"ticketId":"uvtll3hnriuupyfz","createTime":"2023-05-04 15:14:12","updateTime":"2023-05-04 15:14:12","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-25 15:14:11"}],"total":111,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":12}}
[2023-05-04 17:59:01,019][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:59:01,020][test_04_ticket.py 42][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:59:01,020][test_04_ticket.py 45][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:59:01,030][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:59:01,030][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:59:01,030][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:59:01,030][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:59:01,030][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:59:01,030][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:01,031][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 17:59:00",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:59:01,031][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:59:01,031][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:59:01,046][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:59:01,046][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:59:01,046][test_04_ticket.py 62][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:59:01,046][test_04_ticket.py 65][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:59:01,056][conftest.py 28][INFO]: ******************************
[2023-05-04 17:59:01,056][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 17:59:01,056][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 17:59:01,056][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 17:59:01,057][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:59:01,057][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 17:59:01,057][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:59:01,058][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:59:01,058][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:59:01,058][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:01,058][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:59:01,058][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:59:01,058][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:59:01,071][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 17:59:01,071][test_04_ticket.py 81][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:59:01,071][test_04_ticket.py 84][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:59:25,569][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:59:25,581][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:59:25,609][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 17:59:25,610][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 17:59:25,611][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 17:59:25,616][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 17:59:25,635][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 17:59:25,641][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 17:59:25,641][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:59:25,641][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 17:59:25,641][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:59:25,641][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:25,641][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 17:59:25,641][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:59:25,641][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:59:25,655][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 17:59:25,657][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:59:25,657][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 17:59:25,657][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 17:59:25,657][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:59:25,657][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:59:25,658][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:25,658][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:59:25,658][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 17:59:25,658][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 17:59:25,679][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12995,"ticketId":"x2ynio31mxl2x6e5","createTime":"2023-05-04 17:59:01","updateTime":"2023-05-04 17:59:01","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:00"},{"id":12994,"ticketId":"wcawxk6csiuhdpuo","createTime":"2023-05-04 17:58:13","updateTime":"2023-05-04 17:58:13","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:58:12"},{"id":12992,"ticketId":"1y3e4yaxptgjtrvw","createTime":"2023-05-04 17:25:50","updateTime":"2023-05-04 17:25:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:25:49"},{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12985,"ticketId":"2y4nw7hs0rmc0kcn","createTime":"2023-05-04 17:00:59","updateTime":"2023-05-04 17:00:59","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"}],"total":112,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":12}}
[2023-05-04 17:59:25,680][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 17:59:25,680][test_04_ticket.py 42][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:59:25,680][test_04_ticket.py 45][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:59:25,691][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:59:25,691][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 17:59:25,691][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 17:59:25,691][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:59:25,691][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:59:25,691][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:25,691][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 17:59:25",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 17:59:25,691][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:59:25,691][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:59:25,704][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 17:59:25,704][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 17:59:25,704][test_04_ticket.py 62][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:59:25,704][test_04_ticket.py 65][INFO]: *************** 结束执行用例 ***************
[2023-05-04 17:59:25,715][conftest.py 28][INFO]: ******************************
[2023-05-04 17:59:25,715][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 17:59:25,715][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 17:59:25,716][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 17:59:25,717][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 17:59:25,717][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 17:59:25,717][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 17:59:25,717][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 17:59:25,718][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 17:59:25,718][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 17:59:25,718][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 17:59:25,718][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 17:59:25,718][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 17:59:25,730][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 17:59:25,730][test_04_ticket.py 81][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 17:59:25,731][test_04_ticket.py 84][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:03:22,399][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:03:22,410][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:03:22,415][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:03:22,416][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:03:22,417][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:03:22,421][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:03:22,632][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:03:22,637][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:03:22,643][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,643][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:03:22,644][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:03:22,644][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:03:22,644][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,644][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,644][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:03:22,644][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,644][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,665][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"}
[2023-05-04 18:03:22,665][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 18:03:22,665][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 18:03:22,665][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:03:22,670][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,672][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:03:22,672][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:03:22,672][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:03:22,672][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,672][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,672][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 18:03:22,672][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,672][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,682][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 18:03:22,682][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 18:03:22,682][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 18:03:22,683][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:03:22,688][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:03:22,688][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:03:22,688][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:03:22,688][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,688][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,688][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:03:22,688][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,688][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,700][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:03:22,701][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,701][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 18:03:22,701][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:03:22,701][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,701][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,701][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,702][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:03:22,702][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,702][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,715][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:03:22,715][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：9a2d5a7e-c2ab-4b62-bcac-78d1fd282031
[2023-05-04 18:03:22,715][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:03:22,716][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:03:22,720][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,720][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 18:03:22,720][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:03:22,721][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,721][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:03:22,721][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,721][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:03:22,721][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 18:03:22,721][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:03:22,728][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:03:22,810][conftest.py 28][INFO]: ******************************
[2023-05-04 18:03:22,810][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:03:22,810][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:03:22,811][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:03:22,814][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,814][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 18:03:22,814][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:03:22,814][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,814][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,814][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,814][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 18:03:22,814][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,814][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,825][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:03:22,825][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 18:03:22,840][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:03:22,840][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:03:22,840][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:03:22,844][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,844][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 18:03:22,844][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:03:22,844][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,844][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,844][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,845][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 18:03:22,845][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,845][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,853][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:03:22,854][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 18:03:22,870][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,870][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 18:03:22,870][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:03:22,870][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,870][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:03:22,870][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,870][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:03:22,870][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 18:03:22,870][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:03:22,879][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:03:22,879][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 18:03:22,889][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,889][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 18:03:22,889][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:03:22,889][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,889][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,889][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,889][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 18:03:22",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 18:03:22,889][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,889][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,896][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:03:22,896][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 18:03:22,909][conftest.py 28][INFO]: ******************************
[2023-05-04 18:03:22,909][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:03:22,909][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 18:03:22,909][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 18:03:22,910][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:03:22,910][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 18:03:22,910][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:03:22,910][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "9a2d5a7e-c2ab-4b62-bcac-78d1fd282031"
}
[2023-05-04 18:03:22,910][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:03:22,910][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:03:22,911][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:03:22,911][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:03:22,911][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:03:22,918][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 18:04:20,521][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:04:20,532][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:04:20,538][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:04:20,539][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:04:20,541][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:04:20,547][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:04:20,580][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:04:20,585][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:04:20,590][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,590][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:04:20,590][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:04:20,590][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:04:20,590][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,590][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,590][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:04:20,590][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,590][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,609][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"cf206381-4ab4-47f4-808a-3980267240c8"}
[2023-05-04 18:04:20,610][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 18:04:20,610][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 18:04:20,610][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:04:20,616][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,617][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:04:20,617][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:04:20,617][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:04:20,617][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,617][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,617][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 18:04:20,617][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,617][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,625][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 18:04:20,625][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 18:04:20,625][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 18:04:20,625][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:04:20,630][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:04:20,630][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:04:20,630][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:04:20,630][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,630][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,630][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:04:20,630][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,630][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,639][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:04:20,640][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,640][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 18:04:20,640][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:04:20,640][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,640][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,640][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,640][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:04:20,640][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,640][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,651][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:04:20,652][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：cf206381-4ab4-47f4-808a-3980267240c8
[2023-05-04 18:04:20,652][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:04:20,652][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:04:20,657][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,657][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 18:04:20,657][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:04:20,657][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,657][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:04:20,658][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,658][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:04:20,658][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 18:04:20,658][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:04:20,668][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:04:20,755][conftest.py 28][INFO]: ******************************
[2023-05-04 18:04:20,755][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:04:20,755][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:04:20,755][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:04:20,756][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,756][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 18:04:20,756][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:04:20,756][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,756][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,756][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,756][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 18:04:20,756][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,757][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,766][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:04:20,767][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 18:04:20,779][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:04:20,779][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:04:20,780][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:04:20,782][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,782][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 18:04:20,782][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:04:20,782][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,782][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,782][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,782][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 18:04:20,783][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,783][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,789][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:04:20,789][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 18:04:20,799][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,799][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 18:04:20,799][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:04:20,799][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,799][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:04:20,799][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,799][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:04:20,799][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 18:04:20,800][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:04:20,806][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:04:20,806][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 18:04:20,816][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,816][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 18:04:20,816][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:04:20,816][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,816][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,816][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,816][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 18:04:20",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 18:04:20,816][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,816][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,822][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:04:20,822][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 18:04:20,833][conftest.py 28][INFO]: ******************************
[2023-05-04 18:04:20,833][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:04:20,833][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 18:04:20,833][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 18:04:20,834][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:04:20,834][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 18:04:20,834][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:04:20,834][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "cf206381-4ab4-47f4-808a-3980267240c8"
}
[2023-05-04 18:04:20,834][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:04:20,835][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:04:20,835][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:04:20,835][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:04:20,835][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:04:20,841][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 18:06:43,451][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:06:43,463][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:06:43,481][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:06:43,483][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:06:43,483][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:06:43,489][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:06:43,507][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:06:43,513][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:06:43,513][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:06:43,514][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:06:43,514][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:06:43,514][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:06:43,514][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:06:43,514][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:06:43,514][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:06:43,540][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:06:43,541][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:06:43,542][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 18:06:43,542][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:06:43,542][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:06:43,542][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:06:43,542][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:06:43,543][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:06:43,543][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 18:06:43,543][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:06:43,563][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"roomId":710,"roomName":"Test","sceneId":658,"userNum":1,"status":1,"beginTime":"2023-04-27","endTime":"2023-05-22","createTime":"2023-04-27 11:04:04","updateTime":"2023-04-27 11:04:04","createUser":5},{"roomId":709,"roomName":"Test2","sceneId":658,"userNum":3,"status":1,"beginTime":"2023-04-20","endTime":"2023-05-25","createTime":"2023-04-26 10:53:22","updateTime":"2023-04-26 10:53:22","createUser":5},{"roomId":708,"roomName":"Test1","sceneId":656,"userNum":99,"status":1,"beginTime":"2023-04-26","endTime":"2023-05-24","createTime":"2023-04-26 10:44:13","updateTime":"2023-04-26 10:44:13","createUser":5},{"roomId":707,"roomName":"Test","sceneId":656,"userNum":6,"status":1,"beginTime":"2023-04-12","endTime":"2023-05-09","createTime":"2023-04-26 10:41:45","updateTime":"2023-04-26 10:41:45","createUser":5},{"roomId":706,"roomName":"Test-office","sceneId":658,"userNum":999,"status":1,"beginTime":"2023-04-26","endTime":"2023-05-25","createTime":"2023-04-26 10:24:02","updateTime":"2023-04-26 10:24:02","createUser":5},{"roomId":705,"roomName":"office","sceneId":658,"userNum":6,"status":1,"beginTime":"2023-04-22","endTime":"2023-05-19","createTime":"2023-04-23 14:04:45","updateTime":"2023-04-23 14:04:45","createUser":5},{"roomId":702,"roomName":"Test11","sceneId":657,"userNum":9996,"status":1,"beginTime":"2023-04-21","endTime":"2023-05-19","createTime":"2023-04-18 10:46:48","updateTime":"2023-04-18 10:46:48","createUser":5},{"roomId":700,"roomName":"Test10","sceneId":656,"userNum":2,"status":1,"beginTime":"2023-04-14","endTime":"2023-05-19","createTime":"2023-04-17 11:53:55","updateTime":"2023-04-17 11:53:55","createUser":5},{"roomId":699,"roomName":"Test9","sceneId":657,"userNum":7,"status":1,"beginTime":"2023-04-21","endTime":"2023-05-10","createTime":"2023-04-14 17:09:43","updateTime":"2023-04-17 15:12:42","createUser":5},{"roomId":698,"roomName":"Test8","sceneId":657,"userNum":9999,"status":1,"beginTime":"2023-04-15","endTime":"2023-05-19","createTime":"2023-04-14 17:08:49","updateTime":"2023-04-17 13:43:34","createUser":5}],"total":20,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"pages":2}}
[2023-05-04 18:06:43,563][test_03_room.py 39][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:06:43,563][test_03_room.py 42][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:06:43,577][conftest.py 28][INFO]: ******************************
[2023-05-04 18:06:43,577][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:06:43,577][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:06:43,577][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:06:43,579][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:06:43,579][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 18:06:43,579][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:06:43,579][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:06:43,579][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:06:43,579][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:06:43,579][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 18:06:43,579][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:06:43,579][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:06:43,596][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:06:43,597][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 18:06:43,597][test_03_room.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:06:43,597][test_03_room.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:06:43,606][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:06:43,606][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:06:43,606][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:06:43,609][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:06:43,609][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 18:06:43,609][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:06:43,610][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:06:43,610][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:06:43,610][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:06:43,610][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 18:06:43,610][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:06:43,610][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:06:43,625][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"success":false,"code":-1,"message":"服务异常,请稍后再试!","data":null}
[2023-05-04 18:06:43,625][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 18:11:32,258][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:11:32,270][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:11:32,275][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:11:32,276][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:11:32,276][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:11:32,279][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:11:32,300][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:11:32,306][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:11:32,307][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:11:32,307][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:11:32,307][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:11:32,307][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:11:32,307][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:11:32,307][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:11:32,307][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:11:32,327][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:11:32,328][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:11:32,329][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 18:11:32,329][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:11:32,329][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:11:32,329][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:11:32,329][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:11:32,329][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:11:32,329][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 18:11:32,329][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:11:32,351][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12996,"ticketId":"dhst67nak0mpdyop","createTime":"2023-05-04 17:59:26","updateTime":"2023-05-04 17:59:26","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:25"},{"id":12995,"ticketId":"x2ynio31mxl2x6e5","createTime":"2023-05-04 17:59:01","updateTime":"2023-05-04 17:59:01","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:00"},{"id":12994,"ticketId":"wcawxk6csiuhdpuo","createTime":"2023-05-04 17:58:13","updateTime":"2023-05-04 17:58:13","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:58:12"},{"id":12992,"ticketId":"1y3e4yaxptgjtrvw","createTime":"2023-05-04 17:25:50","updateTime":"2023-05-04 17:25:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:25:49"},{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12986,"ticketId":"mnzjb574qj1aji4c","createTime":"2023-05-04 17:05:44","updateTime":"2023-05-04 17:05:44","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"}],"total":113,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":12}}
[2023-05-04 18:11:32,351][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 18:11:32,351][test_04_ticket.py 42][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:11:32,351][test_04_ticket.py 45][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:11:32,359][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:11:32,359][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 18:11:32,359][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:11:32,359][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:11:32,359][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:11:32,359][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:11:32,359][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 18:11:32",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 18:11:32,359][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:11:32,359][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:11:32,379][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:11:32,379][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 18:11:32,379][test_04_ticket.py 62][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:11:32,379][test_04_ticket.py 65][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:11:32,388][conftest.py 28][INFO]: ******************************
[2023-05-04 18:11:32,389][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:11:32,389][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 18:11:32,389][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 18:11:32,390][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:11:32,390][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 18:11:32,390][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:11:32,390][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:11:32,390][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:11:32,390][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:11:32,390][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:11:32,390][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:11:32,390][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:11:32,406][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 18:11:32,406][test_04_ticket.py 81][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:11:32,406][test_04_ticket.py 84][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:46:55,011][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:46:55,024][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:46:55,046][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:46:55,047][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:46:55,047][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:46:55,050][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:46:55,074][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:46:55,081][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:46:55,081][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:46:55,081][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:46:55,081][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:46:55,081][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:46:55,081][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:46:55,081][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:46:55,081][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:46:55,122][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:46:55,124][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:46:55,124][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 18:46:55,124][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:46:55,125][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:46:55,125][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:46:55,125][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:46:55,125][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:46:55,125][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 18:46:55,125][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:46:55,151][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"roomId":710,"roomName":"Test","sceneId":658,"userNum":1,"status":1,"beginTime":"2023-04-27","endTime":"2023-05-22","createTime":"2023-04-27 11:04:04","updateTime":"2023-04-27 11:04:04","createUser":5},{"roomId":709,"roomName":"Test2","sceneId":658,"userNum":3,"status":1,"beginTime":"2023-04-20","endTime":"2023-05-25","createTime":"2023-04-26 10:53:22","updateTime":"2023-04-26 10:53:22","createUser":5},{"roomId":708,"roomName":"Test1","sceneId":656,"userNum":99,"status":1,"beginTime":"2023-04-26","endTime":"2023-05-24","createTime":"2023-04-26 10:44:13","updateTime":"2023-04-26 10:44:13","createUser":5},{"roomId":707,"roomName":"Test","sceneId":656,"userNum":6,"status":1,"beginTime":"2023-04-12","endTime":"2023-05-09","createTime":"2023-04-26 10:41:45","updateTime":"2023-04-26 10:41:45","createUser":5},{"roomId":706,"roomName":"Test-office","sceneId":658,"userNum":999,"status":1,"beginTime":"2023-04-26","endTime":"2023-05-25","createTime":"2023-04-26 10:24:02","updateTime":"2023-04-26 10:24:02","createUser":5},{"roomId":705,"roomName":"office","sceneId":658,"userNum":6,"status":1,"beginTime":"2023-04-22","endTime":"2023-05-19","createTime":"2023-04-23 14:04:45","updateTime":"2023-04-23 14:04:45","createUser":5},{"roomId":702,"roomName":"Test11","sceneId":657,"userNum":9996,"status":1,"beginTime":"2023-04-21","endTime":"2023-05-19","createTime":"2023-04-18 10:46:48","updateTime":"2023-04-18 10:46:48","createUser":5},{"roomId":700,"roomName":"Test10","sceneId":656,"userNum":2,"status":1,"beginTime":"2023-04-14","endTime":"2023-05-19","createTime":"2023-04-17 11:53:55","updateTime":"2023-04-17 11:53:55","createUser":5},{"roomId":699,"roomName":"Test9","sceneId":657,"userNum":7,"status":1,"beginTime":"2023-04-21","endTime":"2023-05-10","createTime":"2023-04-14 17:09:43","updateTime":"2023-04-17 15:12:42","createUser":5},{"roomId":698,"roomName":"Test8","sceneId":657,"userNum":9999,"status":1,"beginTime":"2023-04-15","endTime":"2023-05-19","createTime":"2023-04-14 17:08:49","updateTime":"2023-04-17 13:43:34","createUser":5}],"total":20,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"pages":2}}
[2023-05-04 18:46:55,151][test_03_room.py 39][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:46:55,152][test_03_room.py 42][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:46:55,165][conftest.py 28][INFO]: ******************************
[2023-05-04 18:46:55,165][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:46:55,165][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:46:55,165][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:46:55,167][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:46:55,167][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 18:46:55,168][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:46:55,168][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:46:55,168][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:46:55,168][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:46:55,168][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 18:46:55,168][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:46:55,168][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:46:55,186][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:46:55,187][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 18:46:55,187][test_03_room.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:46:55,187][test_03_room.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:46:55,198][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:46:55,199][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:46:55,199][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:46:55,203][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:46:55,203][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 18:46:55,203][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:46:55,203][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:46:55,203][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:46:55,203][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:46:55,203][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 18:46:55,203][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:46:55,203][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:46:55,217][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"success":false,"code":-1,"message":"服务异常,请稍后再试!","data":null}
[2023-05-04 18:46:55,217][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 18:48:38,578][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:38,589][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:38,594][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:48:38,595][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:48:38,595][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:48:38,598][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:48:38,656][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:38,660][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:38,666][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,666][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:48:38,666][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:38,666][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:48:38,666][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,666][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,666][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:48:38,666][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,667][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,689][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"ee848913-aad0-459a-b914-27393887664a"}
[2023-05-04 18:48:38,689][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 18:48:38,689][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 18:48:38,690][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:48:38,694][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,694][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:48:38,694][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:38,694][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:48:38,694][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,694][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,694][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 18:48:38,694][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,694][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,705][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 18:48:38,705][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 18:48:38,705][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 18:48:38,705][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:48:38,714][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:48:38,715][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:38,715][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:48:38,715][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,715][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,715][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:48:38,715][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,715][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,726][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:48:38,727][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,727][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 18:48:38,727][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:48:38,727][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,727][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,727][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,727][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:38,727][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,727][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,744][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:48:38,744][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：ee848913-aad0-459a-b914-27393887664a
[2023-05-04 18:48:38,744][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:48:38,744][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:48:38,754][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,755][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 18:48:38,755][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:48:38,755][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,755][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:38,755][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,755][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:38,755][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 18:48:38,755][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:38,765][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:38,857][conftest.py 28][INFO]: ******************************
[2023-05-04 18:48:38,857][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:48:38,857][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:48:38,857][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:48:38,858][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,859][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 18:48:38,859][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:38,859][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,859][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,859][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,859][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 18:48:38,859][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,859][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,870][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:38,871][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 18:48:38,885][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:48:38,885][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:48:38,885][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:48:38,888][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,888][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 18:48:38,888][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:48:38,888][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,888][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,889][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,889][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 18:48:38,889][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,889][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,896][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:38,896][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 18:48:38,909][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,909][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 18:48:38,909][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:48:38,909][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,909][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:38,909][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,910][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:38,910][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 18:48:38,910][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:38,921][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:38,921][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 18:48:38,930][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,930][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 18:48:38,930][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:38,930][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,930][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,931][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,931][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 18:48:38",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 18:48:38,931][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,931][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,942][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:38,942][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 18:48:38,957][conftest.py 28][INFO]: ******************************
[2023-05-04 18:48:38,957][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:48:38,957][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 18:48:38,957][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 18:48:38,958][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:38,958][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 18:48:38,958][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:48:38,958][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "ee848913-aad0-459a-b914-27393887664a"
}
[2023-05-04 18:48:38,958][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:38,958][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:38,958][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:38,958][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:38,958][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:38,965][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 18:48:48,231][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:48,242][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:48,246][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:48:48,248][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:48:48,249][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:48:48,257][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:48:48,318][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:48,323][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:48:48,328][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,329][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:48:48,329][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:48,329][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:48:48,329][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,329][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,329][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:48:48,329][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,329][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,346][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"}
[2023-05-04 18:48:48,346][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 18:48:48,347][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 18:48:48,347][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:48:48,353][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,353][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:48:48,353][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:48,354][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:48:48,354][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,354][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,354][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 18:48:48,354][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,354][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,363][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 18:48:48,363][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 18:48:48,364][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 18:48:48,364][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:48:48,368][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:48:48,369][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:48,369][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:48:48,369][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,369][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,369][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:48:48,369][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,369][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,379][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:48:48,380][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,380][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 18:48:48,380][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:48:48,381][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,381][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,381][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,381][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:48,381][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,381][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,396][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 18:48:48,397][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：84bb9e13-aa41-46fc-8d21-d0ad86a2f74a
[2023-05-04 18:48:48,397][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 18:48:48,397][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 18:48:48,403][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,403][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 18:48:48,403][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:48:48,403][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,404][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:48,404][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,404][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:48,404][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 18:48:48,404][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:48,413][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:48,494][conftest.py 28][INFO]: ******************************
[2023-05-04 18:48:48,494][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:48:48,494][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:48:48,494][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:48:48,494][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,494][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 18:48:48,495][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:48,495][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,495][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,495][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,495][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 18:48:48,495][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,495][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,505][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:48,505][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 18:48:48,517][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:48:48,517][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:48:48,517][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:48:48,520][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,520][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 18:48:48,520][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:48:48,520][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,521][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,521][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,521][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 18:48:48,521][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,521][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,531][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:48,531][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 18:48:48,544][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,544][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 18:48:48,544][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 18:48:48,544][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,544][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:48,545][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,545][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:48,545][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 18:48:48,545][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 18:48:48,554][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:48,554][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 18:48:48,563][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,563][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 18:48:48,563][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:48:48,563][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,563][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,563][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,563][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 18:48:48",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 18:48:48,563][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,563][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,573][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 18:48:48,573][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 18:48:48,583][conftest.py 28][INFO]: ******************************
[2023-05-04 18:48:48,585][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:48:48,585][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 18:48:48,585][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 18:48:48,586][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:48:48,586][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 18:48:48,586][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 18:48:48,586][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "84bb9e13-aa41-46fc-8d21-d0ad86a2f74a"
}
[2023-05-04 18:48:48,586][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:48:48,586][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:48:48,586][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 18:48:48,586][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:48:48,586][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:48:48,593][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 18:56:58,831][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:56:58,841][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:56:58,849][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 18:56:58,851][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 18:56:58,853][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 18:56:58,864][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 18:56:58,923][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:56:58,933][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 18:56:58,939][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:58,939][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:56:58,939][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:56:58,939][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:56:58,939][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:56:58,939][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:56:58,939][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:56:58,939][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:56:58,939][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:56:58,965][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"801fc57c-3e1d-4088-bc59-2b6f63bbfd75"}
[2023-05-04 18:56:58,965][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 18:56:58,966][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 18:56:58,966][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:56:58,976][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:58,976][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:56:58,976][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:56:58,976][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:56:58,976][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:56:58,976][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:56:58,976][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 18:56:58,976][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:56:58,977][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:56:58,997][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 18:56:58,997][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 18:56:58,998][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 18:56:58,998][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 18:56:59,006][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 18:56:59,006][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 18:56:59,006][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 18:56:59,006][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 18:56:59,006][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 18:56:59,006][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 18:56:59,006][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 18:56:59,006][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 18:56:59,015][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 18:56:59,016][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:59,091][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:59,103][conftest.py 28][INFO]: ******************************
[2023-05-04 18:56:59,103][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:56:59,103][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 18:56:59,103][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:56:59,104][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:59,116][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 18:56:59,116][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 18:56:59,116][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 18:56:59,119][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:59,126][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:59,135][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 18:56:59,146][conftest.py 28][INFO]: ******************************
[2023-05-04 18:56:59,146][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 18:56:59,146][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 18:56:59,146][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 18:56:59,147][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,169][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:16,181][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:16,206][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:00:16,207][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:00:16,207][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:00:16,211][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:00:16,266][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:16,276][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:16,280][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,281][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:00:16,281][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:00:16,281][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:00:16,281][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,281][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,281][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:00:16,281][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,281][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,301][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"801fc57c-3e1d-4088-bc59-2b6f63bbfd75"}
[2023-05-04 19:00:16,301][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:00:16,301][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:00:16,301][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:00:16,305][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,306][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:00:16,306][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:00:16,306][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:00:16,306][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,306][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,306][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:00:16,306][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,306][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,316][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:00:16,316][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:00:16,316][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:00:16,316][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:00:16,320][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:00:16,320][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:00:16,320][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:00:16,320][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,320][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,320][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:00:16,320][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,321][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,331][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:00:16,332][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,332][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:00:16,332][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:00:16,332][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,333][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,333][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,333][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:00:16,333][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,333][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,347][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:00:16,347][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：801fc57c-3e1d-4088-bc59-2b6f63bbfd75
[2023-05-04 19:00:16,347][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:00:16,347][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:00:16,351][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,351][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:00:16,351][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:00:16,351][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,351][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:00:16,351][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,351][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:00:16,351][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:00:16,351][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:00:16,358][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:00:16,438][conftest.py 28][INFO]: ******************************
[2023-05-04 19:00:16,439][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:00:16,439][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:00:16,439][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:00:16,440][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,440][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:00:16,440][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:00:16,440][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,440][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,440][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,440][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:00:16,441][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,441][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,451][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:00:16,451][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:00:16,461][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:00:16,461][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:00:16,461][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:00:16,465][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,465][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:00:16,465][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:00:16,465][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,465][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,465][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,465][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:00:16,465][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,465][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,472][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:00:16,472][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:00:16,479][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,479][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:00:16,479][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:00:16,479][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,479][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:00:16,479][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,479][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:00:16,479][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:00:16,480][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:00:16,487][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:00:16,487][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:00:16,495][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,495][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:00:16,495][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:00:16,495][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,495][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,496][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,496][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:00:16",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:00:16,496][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,496][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,503][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:00:16,503][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:00:16,513][conftest.py 28][INFO]: ******************************
[2023-05-04 19:00:16,513][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:00:16,514][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:00:16,514][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:00:16,515][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:00:16,515][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:00:16,515][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:00:16,515][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "801fc57c-3e1d-4088-bc59-2b6f63bbfd75"
}
[2023-05-04 19:00:16,515][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:00:16,515][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:00:16,515][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:00:16,515][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:00:16,515][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:00:16,520][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:00:27,434][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:27,457][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:27,462][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:00:27,465][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:00:27,466][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:00:27,478][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:00:27,604][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:27,614][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:00:52,497][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:01:04,579][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:01:05,123][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:01:05,402][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:01:05,666][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:01:06,055][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:01:06,517][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:01:06,965][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:01:07,447][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:01:17,578][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"aa319fe7-fa82-4315-98cd-6a0addc278c8"}
[2023-05-04 19:01:19,022][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:01:21,766][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:01:25,982][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:01:27,035][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:01:35,808][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:01:35,978][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:01:36,162][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:01:36,330][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:01:36,514][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:01:36,689][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:01:36,875][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:01:37,079][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:01:39,955][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:01:40,668][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:01:41,365][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:01:42,048][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:01:47,227][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:01:47,428][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:01:47,628][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:01:47,814][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:01:48,016][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:01:48,371][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:01:48,573][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:01:48,761][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:01:50,309][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:01:51,134][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:01:57,640][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:01:57,871][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:01:58,151][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "aa319fe7-fa82-4315-98cd-6a0addc278c8"
}
[2023-05-04 19:01:58,367][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:01:58,599][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:01:58,847][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:01:59,062][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:01:59,293][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:02:04,397][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:02:07,730][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：aa319fe7-fa82-4315-98cd-6a0addc278c8
[2023-05-04 19:02:09,346][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:02:11,129][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:02:12,060][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:02:18,033][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:02:18,266][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:02:18,514][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "aa319fe7-fa82-4315-98cd-6a0addc278c8"
}
[2023-05-04 19:02:18,729][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:02:18,960][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:02:19,468][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:02:19,699][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:02:19,932][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:02:30,368][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:02:44,671][conftest.py 28][INFO]: ******************************
[2023-05-04 19:02:44,932][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:02:45,194][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:02:45,672][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:02:46,108][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:02:53,480][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:02:53,697][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:02:53,930][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "aa319fe7-fa82-4315-98cd-6a0addc278c8"
}
[2023-05-04 19:02:54,149][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:02:54,367][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:02:54,583][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:02:54,767][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:02:54,968][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:02:57,894][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:02:58,687][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:03:04,634][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:03:05,425][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:03:06,094][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:03:15,494][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:03:15,496][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:03:15,496][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:03:15,497][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "aa319fe7-fa82-4315-98cd-6a0addc278c8"
}
[2023-05-04 19:03:15,497][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:03:15,497][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:03:15,497][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:03:15,497][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:03:15,498][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:03:15,510][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:03:15,510][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:03:28,923][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:03:42,031][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:03:42,032][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:03:42,034][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "aa319fe7-fa82-4315-98cd-6a0addc278c8"
}
[2023-05-04 19:03:42,035][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:03:42,036][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:03:42,037][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:03:42,038][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:03:42,039][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:03:42,078][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:03:44,785][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:04:06,899][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:06,921][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:06,942][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:04:06,947][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:04:06,948][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:04:06,963][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:04:07,080][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:07,089][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:07,099][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,100][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:04:07,100][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:07,100][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:04:07,100][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,101][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,101][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:04:07,101][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,101][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,125][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"e68c50c3-b05f-4350-a5ea-f1d88343e2db"}
[2023-05-04 19:04:07,126][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:04:07,126][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:04:07,126][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:04:07,136][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,136][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:04:07,136][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:07,136][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:04:07,136][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,137][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,137][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:04:07,137][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,137][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,149][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:04:07,149][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:04:07,149][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:04:07,149][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:04:07,164][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:04:07,165][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:07,165][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:04:07,165][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,165][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,166][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:04:07,166][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,166][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,179][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:04:07,181][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,181][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:04:07,181][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:04:07,182][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,182][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,182][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,182][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:07,182][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,182][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,195][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:04:07,196][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：e68c50c3-b05f-4350-a5ea-f1d88343e2db
[2023-05-04 19:04:07,196][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:04:07,196][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:04:07,204][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,204][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:04:07,205][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:04:07,205][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,206][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:07,206][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,206][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:07,206][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:04:07,206][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:07,217][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:07,375][conftest.py 28][INFO]: ******************************
[2023-05-04 19:04:07,375][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:04:07,375][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:04:07,375][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:04:07,378][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,378][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:04:07,378][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:07,378][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,379][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,379][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,379][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:04:07,379][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,379][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,388][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:07,389][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:04:07,408][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:04:07,408][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:04:07,408][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:04:07,416][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,416][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:04:07,416][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:04:07,416][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,417][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,417][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,417][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:04:07,417][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,417][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,430][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:07,430][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:04:07,449][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,449][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:04:07,450][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:04:07,450][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,450][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:07,450][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,450][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:07,450][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:04:07,451][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:07,464][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:07,464][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:04:07,481][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,481][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:04:07,482][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:07,482][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,482][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,482][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,482][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:04:07",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:04:07,483][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,483][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,495][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:07,495][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:04:07,513][conftest.py 28][INFO]: ******************************
[2023-05-04 19:04:07,514][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:04:07,514][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:04:07,514][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:04:07,517][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:07,518][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:04:07,518][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:04:07,519][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e68c50c3-b05f-4350-a5ea-f1d88343e2db"
}
[2023-05-04 19:04:07,519][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:07,520][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:07,520][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:07,520][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:07,520][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:07,535][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:04:34,928][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:34,941][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:34,961][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:04:34,962][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:04:34,962][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:04:34,965][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:04:35,018][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:35,022][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:04:35,026][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,027][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:04:35,027][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:35,027][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:04:35,027][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,027][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,027][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:04:35,027][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,027][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,045][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"92651c1b-5969-43a2-adbb-6b9beaa2cffd"}
[2023-05-04 19:04:35,045][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:04:35,045][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:04:35,045][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:04:35,050][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,050][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:04:35,050][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:35,050][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:04:35,050][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,050][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,050][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:04:35,050][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,050][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,057][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:04:35,057][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:04:35,057][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:04:35,057][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:04:35,061][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:04:35,061][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:35,061][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:04:35,061][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,061][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,061][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:04:35,062][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,062][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,070][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:04:35,071][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,071][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:04:35,071][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:04:35,071][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,071][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,071][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,071][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:35,071][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,071][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,099][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:04:35,099][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：92651c1b-5969-43a2-adbb-6b9beaa2cffd
[2023-05-04 19:04:35,099][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:04:35,100][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:04:35,103][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,103][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:04:35,104][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:04:35,104][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,104][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:35,104][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,104][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:35,104][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:04:35,104][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:35,116][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:35,199][conftest.py 28][INFO]: ******************************
[2023-05-04 19:04:35,199][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:04:35,199][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:04:35,199][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:04:35,200][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,200][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:04:35,200][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:35,200][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,200][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,200][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,200][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:04:35,200][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,201][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,209][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:35,209][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:04:35,219][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:04:35,219][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:04:35,219][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:04:35,222][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,222][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:04:35,222][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:04:35,222][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,222][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,222][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,222][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:04:35,222][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,222][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,229][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:35,229][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:04:35,237][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,237][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:04:35,237][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:04:35,237][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,237][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:35,237][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,237][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:35,237][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:04:35,237][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:04:35,246][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:35,246][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:04:35,254][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,254][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:04:35,254][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:04:35,255][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,255][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,255][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,255][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:04:35",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:04:35,255][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,255][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,263][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:04:35,263][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:04:35,273][conftest.py 28][INFO]: ******************************
[2023-05-04 19:04:35,273][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:04:35,273][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:04:35,273][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:04:35,274][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:04:35,274][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:04:35,274][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:04:35,274][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "92651c1b-5969-43a2-adbb-6b9beaa2cffd"
}
[2023-05-04 19:04:35,274][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:04:35,274][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:04:35,274][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:04:35,274][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:04:35,274][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:04:35,284][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:08:39,255][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:08:39,266][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:08:39,305][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:08:39,306][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:08:39,306][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:08:39,312][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:08:39,372][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:08:39,376][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:08:39,383][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,383][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:08:39,383][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:08:39,383][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:08:39,383][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,383][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,383][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:08:39,383][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,383][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,418][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"25207b1d-b0e5-4c71-8226-dfac66dc8ec9"}
[2023-05-04 19:08:39,418][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:08:39,419][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:08:39,419][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:08:39,424][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,424][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:08:39,424][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:08:39,424][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:08:39,424][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,424][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,424][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:08:39,424][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,424][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,437][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:08:39,437][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:08:39,437][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:08:39,437][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:08:39,443][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:08:39,443][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:08:39,443][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:08:39,443][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,444][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,444][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:08:39,444][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,444][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,452][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:08:39,453][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,454][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:08:39,454][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:08:39,454][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,454][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,454][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,454][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:08:39,454][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,454][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,478][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:08:39,478][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：25207b1d-b0e5-4c71-8226-dfac66dc8ec9
[2023-05-04 19:08:39,478][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:08:39,479][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:08:39,486][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,487][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:08:39,487][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:08:39,487][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,487][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:08:39,488][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,488][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:08:39,488][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:08:39,488][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:08:39,496][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:08:39,596][conftest.py 28][INFO]: ******************************
[2023-05-04 19:08:39,596][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:08:39,596][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:08:39,596][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:08:39,597][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,597][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:08:39,597][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:08:39,597][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,598][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,598][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,598][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:08:39,598][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,598][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,609][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:08:39,609][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:08:39,638][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:08:39,638][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:08:39,638][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:08:39,642][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,642][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:08:39,642][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:08:39,642][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,642][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,642][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,642][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:08:39,642][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,643][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,652][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:08:39,652][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:08:39,667][test_04_ticket.py 36][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,667][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:08:39,668][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:08:39,668][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,668][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:08:39,668][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,668][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:08:39,668][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:08:39,668][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:08:39,689][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:08:39,689][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:08:39,699][test_04_ticket.py 55][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,699][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:08:39,699][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:08:39,699][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,699][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,699][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,699][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:08:39",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:08:39,699][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,699][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,714][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:08:39,715][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:08:39,741][conftest.py 28][INFO]: ******************************
[2023-05-04 19:08:39,741][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:08:39,742][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:08:39,742][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:08:39,744][test_04_ticket.py 75][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:08:39,745][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:08:39,745][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:08:39,745][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "25207b1d-b0e5-4c71-8226-dfac66dc8ec9"
}
[2023-05-04 19:08:39,745][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:08:39,745][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:08:39,746][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:08:39,746][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:08:39,746][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:08:39,759][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:13:49,680][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:13:49,691][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:13:49,696][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:13:49,696][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:13:49,697][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:13:49,700][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:13:49,724][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:13:49,731][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:13:49,731][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:13:49,731][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:13:49,731][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:13:49,731][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:13:49,731][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:13:49,731][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:13:49,731][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:13:49,762][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:13:49,764][test_04_ticket.py 38][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:13:49,764][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:13:49,764][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:13:49,764][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:13:49,764][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:13:49,764][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:13:49,764][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:13:49,764][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:13:49,764][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:13:49,811][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12997,"ticketId":"07ppjvvulq5shzz0","createTime":"2023-05-04 18:11:32","updateTime":"2023-05-04 18:11:32","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 18:11:32"},{"id":12996,"ticketId":"dhst67nak0mpdyop","createTime":"2023-05-04 17:59:26","updateTime":"2023-05-04 17:59:26","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:25"},{"id":12995,"ticketId":"x2ynio31mxl2x6e5","createTime":"2023-05-04 17:59:01","updateTime":"2023-05-04 17:59:01","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:00"},{"id":12994,"ticketId":"wcawxk6csiuhdpuo","createTime":"2023-05-04 17:58:13","updateTime":"2023-05-04 17:58:13","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:58:12"},{"id":12992,"ticketId":"1y3e4yaxptgjtrvw","createTime":"2023-05-04 17:25:50","updateTime":"2023-05-04 17:25:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:25:49"},{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12987,"ticketId":"z9bvzkdjavtfp5a5","createTime":"2023-05-04 17:06:12","updateTime":"2023-05-04 17:06:12","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"}],"total":114,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":12}}
[2023-05-04 19:13:49,811][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:13:49,811][test_04_ticket.py 44][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:13:49,811][test_04_ticket.py 47][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:13:49,822][test_04_ticket.py 57][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:13:49,822][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:13:49,822][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:13:49,822][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:13:49,822][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:13:49,822][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:13:49,823][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:13:49",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:13:49,823][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:13:49,823][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:13:49,843][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:13:49,844][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:13:49,844][test_04_ticket.py 64][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:13:49,844][test_04_ticket.py 67][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:13:49,852][conftest.py 28][INFO]: ******************************
[2023-05-04 19:13:49,852][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:13:49,852][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:13:49,852][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:13:49,853][test_04_ticket.py 77][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:13:49,853][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:13:49,853][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:13:49,853][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:13:49,853][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:13:49,853][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:13:49,853][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:13:49,854][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:13:49,854][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:13:49,873][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:13:49,874][test_04_ticket.py 83][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:13:49,874][test_04_ticket.py 86][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:14:19,070][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:14:19,079][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:14:19,084][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:14:19,085][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:14:19,086][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:14:19,094][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:14:19,160][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:14:19,171][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:14:19,176][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,176][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:14:19,176][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:14:19,176][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:14:19,176][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,176][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,177][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:14:19,177][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,177][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,195][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"e6c02092-5e30-40af-b1c1-fafcdd911943"}
[2023-05-04 19:14:19,196][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:14:19,196][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:14:19,196][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:14:19,200][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,201][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:14:19,201][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:14:19,201][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:14:19,201][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,201][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,201][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:14:19,201][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,201][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,210][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:14:19,210][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:14:19,211][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:14:19,211][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:14:19,216][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:14:19,216][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:14:19,216][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:14:19,216][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,216][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,216][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:14:19,216][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,216][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,229][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:14:19,230][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,230][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:14:19,230][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:14:19,230][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,231][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,231][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,231][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:14:19,231][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,231][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,243][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:14:19,244][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：e6c02092-5e30-40af-b1c1-fafcdd911943
[2023-05-04 19:14:19,244][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:14:19,245][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:14:19,250][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,250][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:14:19,250][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:14:19,250][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,250][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:14:19,250][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,250][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:14:19,251][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:14:19,251][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:14:19,260][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:14:19,339][conftest.py 28][INFO]: ******************************
[2023-05-04 19:14:19,340][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:14:19,340][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:14:19,340][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:14:19,342][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,342][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:14:19,342][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:14:19,342][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,342][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,343][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,343][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:14:19,343][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,343][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,362][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:14:19,363][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:14:19,375][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:14:19,375][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:14:19,375][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:14:19,378][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,378][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:14:19,378][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:14:19,378][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,378][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,378][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,379][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:14:19,379][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,379][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,384][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:14:19,384][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:14:19,392][test_04_ticket.py 38][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,392][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:14:19,393][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:14:19,393][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,393][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:14:19,393][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,393][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:14:19,393][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:14:19,393][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:14:19,401][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:14:19,401][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:14:19,408][test_04_ticket.py 57][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,409][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:14:19,409][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:14:19,409][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,409][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,409][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,409][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:14:19",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:14:19,409][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,409][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,438][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"code":403,"message":"token 未认证","success":false}
[2023-05-04 19:14:19,438][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:14:19,451][conftest.py 28][INFO]: ******************************
[2023-05-04 19:14:19,452][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:14:19,452][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:14:19,452][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:14:19,453][test_04_ticket.py 77][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:14:19,453][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:14:19,453][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:14:19,453][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "e6c02092-5e30-40af-b1c1-fafcdd911943"
}
[2023-05-04 19:14:19,453][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:14:19,453][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:14:19,453][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:14:19,453][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:14:19,453][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:14:19,470][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:15:09,450][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:15:09,460][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:15:09,466][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\base_data.yml 文件......
[2023-05-04 19:15:09,466][read_data.py 25][INFO]: 读到数据 ==>>  {'init_admin_user': {'username': 'dahua', 'password': '123456'}, 'init_sql': {'delete_create_room': "DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'", 'updata_ticket_status': 'UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;'}} 
[2023-05-04 19:15:09,467][read_data.py 22][INFO]: 加载 D:\PythonProject\pytestProject\data\api_test_data.yml 文件......
[2023-05-04 19:15:09,470][read_data.py 25][INFO]: 读到数据 ==>>  {'test_login_user': [['dahua', '123456', True, 0, '成功'], ['dahua1', '123456', False, 401, '密码或者用户名错误']], 'test_logout_user': [[True, 0, '成功']], 'test_get_room_list': [[1, 10, True, 0, '成功']], 'test_create_room': [['2023-04-27', '2023-05-22', '自动化测试Test', 658, 1, True, 0, '成功']], 'test_get_room_datail': [[710, True, 0, '成功']], 'test_get_ticket_list': [[710, 1, 10, True, 0, '成功']], 'test_genarate_ticket': [['2023-05-26 15:14:11', 710, 1, True, 0, '成功']], 'test_set_aside_ticket': [[12993, True, 0, '成功']]} 
[2023-05-04 19:15:09,537][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:15:09,541][read_data.py 36][INFO]: 加载 D:\PythonProject\pytestProject\config\setting.ini 文件......
[2023-05-04 19:15:09,546][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,547][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,547][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,547][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,547][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,547][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,547][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,547][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,547][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,569][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":"5c84f4e4-f749-4e9c-9d04-e397100d7a46"}
[2023-05-04 19:15:09,569][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua
[2023-05-04 19:15:09,569][test_01_login_user.py 31][INFO]: code ==>> 期望结果：0， 实际结果：【 0 】
[2023-05-04 19:15:09,569][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:15:09,576][test_01_login_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,576][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,577][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,577][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,577][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,577][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,577][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua1"
}
[2023-05-04 19:15:09,577][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,577][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,586][user.py 30][INFO]: 登录用户 ==>> 返回结果 ==>> {"success":false,"code":401,"message":"密码或者用户名错误","data":null}
[2023-05-04 19:15:09,587][test_01_login_user.py 10][INFO]: 步骤1==>>登录用户：dahua1
[2023-05-04 19:15:09,588][test_01_login_user.py 31][INFO]: code ==>> 期望结果：401， 实际结果：【 401 】
[2023-05-04 19:15:09,588][test_01_login_user.py 34][INFO]: **************** 结束执行用例 **************
[2023-05-04 19:15:09,594][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,594][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,594][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,594][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,594][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,594][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,594][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,594][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,608][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,610][test_02_logout_user.py 26][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,610][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/logout
[2023-05-04 19:15:09,610][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:15:09,611][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "5c84f4e4-f749-4e9c-9d04-e397100d7a46"
}
[2023-05-04 19:15:09,611][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,611][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,612][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:15:09,612][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,612][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,625][user.py 52][INFO]: 退出登录 == >> 返回结果 == >> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:15:09,625][test_02_logout_user.py 10][INFO]: 步骤1 ==>> 退出登录token：5c84f4e4-f749-4e9c-9d04-e397100d7a46
[2023-05-04 19:15:09,626][test_02_logout_user.py 32][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:15:09,626][test_02_logout_user.py 35][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:15:09,631][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,631][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,632][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,632][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,632][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,632][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,632][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,632][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,644][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,645][test_03_room.py 34][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,645][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/page
[2023-05-04 19:15:09,645][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:15:09,645][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "d55a4a57-321b-43c2-8a4c-949489cc741b"
}
[2023-05-04 19:15:09,645][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:15:09,645][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,645][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:15:09,646][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'current': 1, 'size': 10}
[2023-05-04 19:15:09,646][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "current": 1,
    "size": 10
}
[2023-05-04 19:15:09,668][room.py 31][INFO]: 获取会议列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"roomId":710,"roomName":"Test","sceneId":658,"userNum":1,"status":1,"beginTime":"2023-04-27","endTime":"2023-05-22","createTime":"2023-04-27 11:04:04","updateTime":"2023-04-27 11:04:04","createUser":5},{"roomId":709,"roomName":"Test2","sceneId":658,"userNum":3,"status":1,"beginTime":"2023-04-20","endTime":"2023-05-25","createTime":"2023-04-26 10:53:22","updateTime":"2023-04-26 10:53:22","createUser":5},{"roomId":708,"roomName":"Test1","sceneId":656,"userNum":99,"status":1,"beginTime":"2023-04-26","endTime":"2023-05-24","createTime":"2023-04-26 10:44:13","updateTime":"2023-04-26 10:44:13","createUser":5},{"roomId":707,"roomName":"Test","sceneId":656,"userNum":6,"status":1,"beginTime":"2023-04-12","endTime":"2023-05-09","createTime":"2023-04-26 10:41:45","updateTime":"2023-04-26 10:41:45","createUser":5},{"roomId":706,"roomName":"Test-office","sceneId":658,"userNum":999,"status":1,"beginTime":"2023-04-26","endTime":"2023-05-25","createTime":"2023-04-26 10:24:02","updateTime":"2023-04-26 10:24:02","createUser":5},{"roomId":705,"roomName":"office","sceneId":658,"userNum":6,"status":1,"beginTime":"2023-04-22","endTime":"2023-05-19","createTime":"2023-04-23 14:04:45","updateTime":"2023-04-23 14:04:45","createUser":5},{"roomId":702,"roomName":"Test11","sceneId":657,"userNum":9996,"status":1,"beginTime":"2023-04-21","endTime":"2023-05-19","createTime":"2023-04-18 10:46:48","updateTime":"2023-04-18 10:46:48","createUser":5},{"roomId":700,"roomName":"Test10","sceneId":656,"userNum":2,"status":1,"beginTime":"2023-04-14","endTime":"2023-05-19","createTime":"2023-04-17 11:53:55","updateTime":"2023-04-17 11:53:55","createUser":5},{"roomId":699,"roomName":"Test9","sceneId":657,"userNum":7,"status":1,"beginTime":"2023-04-21","endTime":"2023-05-10","createTime":"2023-04-14 17:09:43","updateTime":"2023-04-17 15:12:42","createUser":5},{"roomId":698,"roomName":"Test8","sceneId":657,"userNum":9999,"status":1,"beginTime":"2023-04-15","endTime":"2023-05-19","createTime":"2023-04-14 17:08:49","updateTime":"2023-04-17 13:43:34","createUser":5}],"total":20,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"pages":2}}
[2023-05-04 19:15:09,669][test_03_room.py 39][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:15:09,669][test_03_room.py 42][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:15:09,679][conftest.py 28][INFO]: ******************************
[2023-05-04 19:15:09,679][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:15:09,679][conftest.py 65][INFO]: 创建房间操作：删除已有房间--准备创建新房间
[2023-05-04 19:15:09,679][conftest.py 66][INFO]: 执行前置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:15:09,680][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,680][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,680][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,681][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,681][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,681][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,681][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,681][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,694][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,696][test_03_room.py 53][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,696][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/save
[2023-05-04 19:15:09,696][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,696][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "d55a4a57-321b-43c2-8a4c-949489cc741b"
}
[2023-05-04 19:15:09,696][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,696][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,696][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "beginTime": "2023-04-27",
    "endTime": "2023-05-22",
    "roomName": "自动化测试Test",
    "sceneId": 658,
    "userNum": 1
}
[2023-05-04 19:15:09,696][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,696][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,708][room.py 65][INFO]: 创建会议 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:15:09,708][test_03_room.py 15][INFO]: 步骤1 ==>> 创建会议
[2023-05-04 19:15:09,708][test_03_room.py 59][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:15:09,708][test_03_room.py 62][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:15:09,725][conftest.py 34][INFO]: 后置步骤开始 ==>> 清理数据
[2023-05-04 19:15:09,725][conftest.py 70][INFO]: 创建房间操作：删除已创建的房间
[2023-05-04 19:15:09,725][conftest.py 71][INFO]: 执行后置SQL:DELETE  FROM rays_cloud.t_room where room_name = '自动化测试Test'
[2023-05-04 19:15:09,728][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,728][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,728][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,729][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,729][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,729][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,729][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,729][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,741][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,742][test_03_room.py 71][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,742][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/cloud/room/get
[2023-05-04 19:15:09,742][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:15:09,743][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "d55a4a57-321b-43c2-8a4c-949489cc741b"
}
[2023-05-04 19:15:09,743][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,743][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,743][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "roomId": 710
}
[2023-05-04 19:15:09,743][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,743][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,752][room.py 92][INFO]: 获取会议详情 ==>> 返回结果 ==>> {"success":false,"code":-1,"message":"服务异常,请稍后再试!","data":null}
[2023-05-04 19:15:09,752][test_03_room.py 20][INFO]: 步骤1 ==>> 获取会议详情
[2023-05-04 19:15:09,833][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,833][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,833][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,835][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,835][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,835][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,835][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,835][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,850][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,851][test_04_ticket.py 38][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,851][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/page
[2023-05-04 19:15:09,851][rest_client.py 52][INFO]: 接口请求方式 ==>> GET
[2023-05-04 19:15:09,851][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "d55a4a57-321b-43c2-8a4c-949489cc741b"
}
[2023-05-04 19:15:09,851][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:15:09,852][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,852][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:15:09,852][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> {'roomId': 710, 'current': 1, 'size': 10}
[2023-05-04 19:15:09,852][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> {
    "roomId": 710,
    "current": 1,
    "size": 10
}
[2023-05-04 19:15:09,873][ticket.py 33][INFO]: 获取门票列表 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":{"records":[{"id":12998,"ticketId":"uk3hw4yj7v7ecqrg","createTime":"2023-05-04 19:13:50","updateTime":"2023-05-04 19:13:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 19:13:49"},{"id":12997,"ticketId":"07ppjvvulq5shzz0","createTime":"2023-05-04 18:11:32","updateTime":"2023-05-04 18:11:32","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 18:11:32"},{"id":12996,"ticketId":"dhst67nak0mpdyop","createTime":"2023-05-04 17:59:26","updateTime":"2023-05-04 17:59:26","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:25"},{"id":12995,"ticketId":"x2ynio31mxl2x6e5","createTime":"2023-05-04 17:59:01","updateTime":"2023-05-04 17:59:01","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:59:00"},{"id":12994,"ticketId":"wcawxk6csiuhdpuo","createTime":"2023-05-04 17:58:13","updateTime":"2023-05-04 17:58:13","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:58:12"},{"id":12992,"ticketId":"1y3e4yaxptgjtrvw","createTime":"2023-05-04 17:25:50","updateTime":"2023-05-04 17:25:50","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-05 17:25:49"},{"id":12991,"ticketId":"3zc1av7iegpex0sq","createTime":"2023-05-04 17:20:42","updateTime":"2023-05-04 17:20:42","roomId":710,"userId":5,"status":-1,"isActive":0,"expiredTime":"2023-05-04 17:20:41"},{"id":12990,"ticketId":"7u2gh6x82wcyny63","createTime":"2023-05-04 17:11:41","updateTime":"2023-05-04 17:11:41","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12989,"ticketId":"pfp2vtmvh91q53xm","createTime":"2023-05-04 17:09:55","updateTime":"2023-05-04 17:09:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"},{"id":12988,"ticketId":"yzirmfwhfmrcl8bw","createTime":"2023-05-04 17:07:55","updateTime":"2023-05-04 17:07:55","roomId":710,"userId":5,"status":1,"isActive":0,"expiredTime":"2023-05-26 15:14:11"}],"total":115,"size":10,"current":1,"orders":[],"optimizeCountSql":true,"searchCount":true,"countId":null,"maxLimit":null,"roomId":710,"pages":12}}
[2023-05-04 19:15:09,873][test_04_ticket.py 12][INFO]: 步骤1 ==>> 获取门票列表
[2023-05-04 19:15:09,873][test_04_ticket.py 44][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:15:09,873][test_04_ticket.py 47][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:15:09,878][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,878][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,878][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,878][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,878][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,878][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,878][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,878][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,887][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,888][test_04_ticket.py 57][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,888][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/genarate
[2023-05-04 19:15:09,888][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,888][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "d55a4a57-321b-43c2-8a4c-949489cc741b"
}
[2023-05-04 19:15:09,888][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,888][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,888][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "expiredTime": "2023-05-05 19:15:09",
    "roomId": 710,
    "ticketAmount": 1
}
[2023-05-04 19:15:09,888][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,889][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,905][ticket.py 64][INFO]: 门票生成 ==>> 返回结果 ==>> {"success":true,"code":0,"message":"成功","data":null}
[2023-05-04 19:15:09,905][test_04_ticket.py 17][INFO]: 步骤2 ==>> 门票生成
[2023-05-04 19:15:09,907][test_04_ticket.py 64][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:15:09,907][test_04_ticket.py 67][INFO]: *************** 结束执行用例 ***************
[2023-05-04 19:15:09,915][conftest.py 28][INFO]: ******************************
[2023-05-04 19:15:09,915][conftest.py 29][INFO]: 前置步骤开始 ==>> 清理数据
[2023-05-04 19:15:09,915][conftest.py 80][INFO]: 更新门票操作：更新门票状态--准备作废门票
[2023-05-04 19:15:09,915][conftest.py 81][INFO]: 执行前置SQL:UPDATE rays_cloud.t_ticket SET status= 1 where id = 12993;
[2023-05-04 19:15:09,915][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/user/login
[2023-05-04 19:15:09,915][rest_client.py 52][INFO]: 接口请求方式 ==>> POST
[2023-05-04 19:15:09,915][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json"
}
[2023-05-04 19:15:09,915][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,915][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,915][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> {
    "password": "123456",
    "username": "dahua"
}
[2023-05-04 19:15:09,916][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,916][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,925][conftest.py 39][INFO]: 前置步骤 ==>> 管理员 dahua 登录，返回信息 为：<Response [200]>
[2023-05-04 19:15:09,926][test_04_ticket.py 77][INFO]: *************** 开始执行用例 ***************
[2023-05-04 19:15:09,926][rest_client.py 51][INFO]: 接口请求地址 ==>> http://192.168.50.30:8086/api/ticket/banned/12993
[2023-05-04 19:15:09,926][rest_client.py 52][INFO]: 接口请求方式 ==>> PUT
[2023-05-04 19:15:09,926][rest_client.py 54][INFO]: 接口请求头 ==>> {
    "Content-Type": "application/json",
    "Authorization": "d55a4a57-321b-43c2-8a4c-949489cc741b"
}
[2023-05-04 19:15:09,926][rest_client.py 55][INFO]: 接口请求 params 参数 ==>> null
[2023-05-04 19:15:09,926][rest_client.py 56][INFO]: 接口请求体 data 参数 ==>> null
[2023-05-04 19:15:09,926][rest_client.py 57][INFO]: 接口请求体 json 参数 ==>> null
[2023-05-04 19:15:09,926][rest_client.py 58][INFO]: 接口上传附件 files 参数 ==>> None
[2023-05-04 19:15:09,926][rest_client.py 59][INFO]: 接口 cookies 参数 ==>> null
[2023-05-04 19:15:09,940][test_04_ticket.py 22][INFO]: 步骤3 ==>> 门票作废
[2023-05-04 19:15:09,940][test_04_ticket.py 83][INFO]: code ==>> 期望结果：0,实际结果：【0】
[2023-05-04 19:15:09,940][test_04_ticket.py 86][INFO]: *************** 结束执行用例 ***************
